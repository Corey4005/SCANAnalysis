#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 13 16:26:27 2022

@author: cwalker
"""

import numpy as np
import pandas as pd
from class_resample import resample
from datasets import SCAN_READ

## soils object with 
instance = resample(SCAN_READ)
instance.append_soils()
instance.unpack_soils()

#make a dataframe containing soil data
clean_df = instance.stations

def theta_table(df):
    '''
    

    Parameters
    ----------
    df : Pandas DataFrame
        Pass the dataframe generated by:
            df = I.standard_deviation_by_month().mean_soil_moisture_by_month().z_score()
            .quality_z_score(std=3.5).clean_data().show()

    Returns
    -------
    theta_df : Pandas DataFrame
        A dataframe containing the highest theta-s, lowest theta-r and 
        soil-type for each station for the record of climatology.

    '''
    stn = []
    depth = []
    theta_rs = []
    theta_ss = []
    ns = []
    soil_data = []
    
    #researched hydraulic properties Carsel and Parish 
    #of soil textures format: 'key': theta-r, theta-s
    #notice that GRSIL and SIL, as well as SL and FSL, as well as FS and S
    #are assumed to be the same.
    properties = {'S': (0.045, 0.43),
                  'FS': (0.045, 0.43),
                  'LS': (0.057, 0.41),
                  'SL': (0.065, 0.41),
                  'FSL': (0.065, 0.41),
                  'L': (0.078, 0.43),
                  'SI': (0.034, 0.46),
                  'GRSIL': (0.067, 0.45),
                  'SIL': (0.067, 0.45),
                  'SCL': (0.1, 0.39), 
                  'CL': (0.095, 0.41), 
                  'SIC': (0.070, 0.36), 
                  'SICL': (0.089, 0.43),
                  'C': (0.068, 0.38),
                  'BRCK': (np.nan, np.nan)
        }
    
    for i in df['station'].unique():
        station_df = df[df['station'] == i]
        station_df = station_df[['SMS-2.0in', 'SMS-4.0in', 'SMS-8.0in', 'SMS-20.0in', 'SMS-40.0in']]
        for j in station_df:
            theta_s = station_df[j].max()/100
            theta_r = station_df[j].min()/100
            theta_s_format = '{:.4f}'.format(theta_s)
            theta_r_format = '{:.4f}'.format(theta_r)
            n = len(station_df[j]) - (station_df[j].isna().sum())
            ns.append(n)
            soils = get_station_soil(df, station=i)
            soil_at_depth = soils.get(j)
            stn.append(i)
            depth.append(j)
            theta_rs.append(theta_r_format)
            theta_ss.append(theta_s_format)
            soil_data.append(soil_at_depth)
            
    all_data = {'station':stn, 
                'depths':depth, 
                'n': ns,
                'assumed_climatology_theta_r':theta_rs, 
                'assumed_climatology_theta_s':theta_ss, 
                'soiltype': soil_data}
    
    theta_df = pd.DataFrame(all_data)
    
    #soil properties functions
    get_theta_r = lambda x: properties[x][0]
    get_theta_s = lambda x: properties[x][1]
    
    theta_df['physical_theta_r'] = theta_df['soiltype'].apply(get_theta_r)
    theta_df['physical_theta_s'] = theta_df['soiltype'].apply(get_theta_s)
    
    return(theta_df)
           

def get_station_soil(soils_df, station=None):
    '''

    Parameters
    ----------
    station : type = str
        Input the desired Alabama station triplet as a string. The default is None.
        
    soils : type = pandas DataFrame
        Input the dataframe from the station

    Returns
    -------
    station_soils : type = [list of soil types by depth].

    '''
    st = soils_df[soils_df['station'] == station]
    two = st['two_in_soil'].unique()[0]
    four = st['four_in_soil'].unique()[0]
    eight = st['eight_in_soil'].unique()[0]
    twenty = st['twenty_in_soil'].unique()[0]
    forty = st['forty_in_soil'].unique()[0]
    station_soils = {'SMS-2.0in' : two, 
                 'SMS-4.0in' : four, 
                 'SMS-8.0in' : eight, 
                 'SMS-20.0in': twenty, 
                 'SMS-40.0in': forty
        }
    return station_soils
